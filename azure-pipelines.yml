# Surge synth build script
# https://aka.ms/yaml

trigger: none

jobs:
- job: MakeTarball
  steps:
  - checkout: self

  - bash: |
      set -e
      set -o xtrace

      if [ "$SURGE_BRANCH" == "" ]; then
        export SURGE_LOCAL_BRANCH='main'
      else
        export SURGE_LOCAL_BRANCH="${SURGE_BRANCH/refs\/heads\/}"
      fi

      if ! [[ $SURGE_LOCAL_BRANCH =~ ^(main|release/.+)$ ]]; then
        exit 1
      fi

      export SURGE_VERSION="${SURGE_LOCAL_BRANCH##*/}"

      # get the surge code
      git clone --depth 1 --branch $SURGE_LOCAL_BRANCH https://github.com/surge-synthesizer/surge.git 
      cd surge
      git reset --hard $SURGE_LOCAL_BRANCH
      git submodule update --init --recursive

      if [ "$SURGE_VERSION" == "main" ]; then
        export SURGE_VERSION="NIGHTLY-$(date +%Y-%m-%d)-$(git rev-parse --short HEAD)"
      fi
      echo "SURGE_VERSION=$SURGE_VERSION"
      
      # set the active version
      echo $SURGE_VERSION > VERSION

      # Make the git substitute file
      ./scripts/misc/build-version-override.sh

      cat VERSION
      cat VERSION_GIT_INFO

      # Remove the .git directory
      find . -name ".git" -exec rm -rf {} \; || echo "I tried"

      cd ..
      mkdir srctar
      tar -cvzf srctar/SurgeSrc_${SURGE_VERSION}.tgz surge
    displayName: Get source for Tarball
    
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'SOURCE_TARBALL'
      targetPath: 'srctar'
    displayName: Publish Source Tarball


- job: Build
  dependsOn: MakeTarball
  condition: succeeded()
  strategy:
    matrix:
      mac:
        imageName: 'macos-10.14'
        isMac: true
      windows:
        imageName: 'vs2017-win2016'
        isWindows: true
        x64: true
      windows-x86:
        imageName: 'vs2017-win2016'
        isWindows: true
        x86: true
      linux:
        imageName: 'ubuntu-18.04'
        isLinux: true

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: none

### SETUP SECTION

  - bash: |
      set -e

      if [ "$SURGE_BRANCH" == "" ]; then
        export SURGE_LOCAL_BRANCH='main'
      else
        export SURGE_LOCAL_BRANCH="${SURGE_BRANCH/refs\/heads\/}"
      fi

      if ! [[ $SURGE_LOCAL_BRANCH =~ ^(main|release/.+)$ ]]; then
        exit 1
      fi

      echo "SURGE_LOCAL_BRANCH=$SURGE_LOCAL_BRANCH"
      echo "##vso[task.setvariable variable=SURGE_LOCAL_BRANCH]$SURGE_LOCAL_BRANCH"
      echo "##vso[task.setvariable variable=SURGE_LOCAL_BRANCH;isOutput=true]$SURGE_LOCAL_BRANCH"

      export SURGE_VERSION="${SURGE_LOCAL_BRANCH##*/}"
      echo "SURGE_VERSION=$SURGE_VERSION"

      # get the surge code
      git clone --depth 1 --branch $SURGE_LOCAL_BRANCH https://github.com/surge-synthesizer/surge.git 
      mv -f surge/* .
      mv -f surge/.git .
      rm -rf surge
      git reset --hard $SURGE_LOCAL_BRANCH
      ls -al .
      ls -al libs
      git status

      git submodule update --init --recursive

      if [ "$SURGE_VERSION" == "main" ]; then
        export SURGE_VERSION="NIGHTLY-$(date +%Y-%m-%d)-$(git rev-parse --short HEAD)"
      fi
      echo "SURGE_VERSION=$SURGE_VERSION"

      # set the active version
      echo $SURGE_VERSION > VERSION

      export SURGE_VERSION=$(cat VERSION)
      echo "SURGE_VERSION=$SURGE_VERSION"
      echo "##vso[task.setvariable variable=SURGE_VERSION]$SURGE_VERSION"
      echo "##vso[task.setvariable variable=SURGE_VERSION;isOutput=true]$SURGE_VERSION"
    name: surge
    displayName: all - Setup Source and Version

  - bash: |
      set -x
      sudo apt-get update

      # Requirements for Surge
      
      sudo apt-get install -y libgtkmm-3.0-dev
      sudo apt-get install -y xcb
      sudo apt-get install -y libxcb-util-dev
      sudo apt-get install -y libxcb-cursor-dev
      sudo apt-get install -y libxcb-keysyms1-dev
      sudo apt-get install -y libxkbcommon-dev
      sudo apt-get install -y libxkbcommon-x11-dev
      sudo apt-get install -y devscripts

      # Requirements for surge-fx
      sudo apt-get install -y libgtk-3-dev
      sudo apt-get install -y libwebkit2gtk-4.0
      sudo apt-get install -y libwebkit2gtk-4.0-dev
      sudo apt-get install -y libcurl4-openssl-dev
      sudo apt-get install -y alsa
      sudp apt-get install -y alsa-tools
      sudo apt-get install -y libasound2-dev
      sudo apt-get install -y jack
      sudo apt-get install -y libjack-dev
      sudo apt-get install -y libfreetype6-dev
      sudo apt-get install -y libxinerama-dev
      sudo apt-get install -y libxcb-xinerama0
      sudo apt-get install -y libxinerama1
      sudo apt-get install -y x11proto-xinerama-dev
      sudo apt-get install -y libxrandr-dev
      sudo apt-get install -y libgl1-mesa-dev
      sudo apt-get install -y libxcursor-dev 
      sudo apt-get install -y libxcursor1 
      sudo apt-get install -y libxcb-cursor-dev 
      sudo apt-get install -y libxcb-cursor0

    condition: variables.isLinux
    displayName: linux - Setup Host

#### DO THE SURGE BUILDS

  - bash: |
      set -e
      cmake -Bbuild -D AZURE_PIPELINE=1

      cmake --build build --config Release --target all-components

    condition: variables.isLinux
    displayName: linux - Build Surge

  - bash: |
      set -e

      set -e
      cmake -Bbuild -GXcode -D AZURE_PIPELINE=1

      cmake --build build --config Release --target all-components | xcpretty

    condition: variables.isMac
    displayName: macOS - Build Surge

  - bash: |
      set -e

      mkdir -p build
      cmake -Bbuild -A x64 -D AZURE_PIPELINE=1
    condition: and(variables.isWindows, variables.x64)
    displayName: win64 - Setup Project

  - bash: |
      set -e

      mkdir -p build
      cmake -Bbuild -A Win32 -D AZURE_PIPELINE=1
    condition: and(variables.isWindows, variables.x86)
    displayName: win32 - Setup Project


  - bash: |
      set -e

      cmake --build build --config Release --target Surge-VST3-Packaged
    condition: variables.isWindows
    displayName: win - Build Surge

#### FX Stage

  - bash: |
      set -e

      git clone https://github.com/surge-synthesizer/surge-fx.git
      cd surge-fx
      git submodule update --init --recursive

    displayName: all - Clone FX

  - bash: |
      set -e

      cd surge-fx
      cmake -Bbuild
      cmake --build build --config Release --target well-named-assets

    condition: variables.isLinux
    displayName: linux - Build FX

  - bash: |
      set -e
      
      cd surge-fx
      cmake -Bbuild -A x64
      cmake --build build --config Release --target well-named-assets

    condition: and(variables.isWindows, variables.x64)
    displayName: win64 - Build FX

  - bash: |
      set -e

      cd surge-fx
      cmake -Bbuild -A Win32
      cmake --build build --config Release --target well-named-assets

    condition: and(variables.isWindows, variables.x86)
    displayName: win32 - Build FX

  - bash: |
      set -e

      cd surge-fx
      cmake -Bbuild -GXcode
      cmake --build build --config Release --target well-named-assets | xcpretty

    condition: variables.isMac
    displayName: mac - Build FX


### Make the installers

  - bash: |
      set -e
      echo "SURGE_VERSION=$SURGE_VERSION"
      pushd installer_mac
      ./make_installer.sh $SURGE_VERSION --dmg
      rm -f *.pkg
      popd
    condition: variables.isMac
    displayName: mac - make installer

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DMG'
      targetPath: 'installer_mac/installer'
    condition: variables.isMac
    displayName: mac - publish DMG

  - task: NuGetToolInstaller@0
    condition: variables.isWindows
    displayName: win - Install NuGet for ISCC
    
  - bash: |
      set -e
      nuget install innosetup
      iscc installer_win/surge.iss
    condition: and(variables.isWindows, variables.x64)
    displayName: win64 - make installer


  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_EXE'
      targetPath: 'installer_win/Output'
    condition: and(variables.isWindows, variables.x64)
    displayName: win64 - publish installer

  - bash: |
      set -e
      nuget install innosetup
      iscc installer_win/surge-x86.iss
    condition: and(variables.isWindows, variables.x86)
    displayName: win32 - make installer

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_X86_EXE'
      targetPath: 'installer_win/Output'
    condition: and(variables.isWindows, variables.x86)
    displayName: win32 - publish installer

  - bash: |
      echo "SURGE_VERSION=$SURGE_VERSION"
      pushd installer_linux
      echo "sudo makedeb so we get root file perms, since --root-owner-group doesn't work on ubuntu 16.04"
      echo "sudo ./make_deb.sh $SURGE_VERSION"
      sudo ./make_deb.sh "$SURGE_VERSION"
      popd
    condition: variables.isLinux
    displayName: linux - make deb installer

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_LINUX_DEB'
      targetPath: 'installer_linux/product'
    condition: variables.isLinux
    displayName: linux - publish deb installer

  # Finally make the git info
  - bash: |
      mkdir -p stage_git/git_info
      git log -1 --pretty=format:'%h : %s - %an' > stage_git/git_info/git_nightly_log_head

    condition: variables.isMac
    displayName: Use the mac build to make git log info

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'GIT_INFO'
      targetPath: 'stage_git/'
    condition: variables.isMac
    displayName: Publish the Git Info


- job: Release
  dependsOn: Build
  condition: succeeded()
  variables:
    SURGE_VERSION: $[ dependencies.Build.outputs['mac.surge.SURGE_VERSION'] ]
    SURGE_BRANCH: $[ dependencies.Build.outputs['mac.surge.SURGE_LOCAL_BRANCH'] ]

  steps:
  - checkout: self

  - task: DownloadSecureFile@1
    inputs:
      secureFile: surge-build-bot.sh

  - task: DownloadSecureFile@1
    inputs:
      secureFile: discord-nightly.webhook

  - task: DownloadSecureFile@1
    inputs:
      secureFile: checkout-website.sh

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DMG'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_EXE'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_X86_EXE'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_LINUX_DEB'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SOURCE_TARBALL'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'GIT_INFO'
      targetPath: $(System.DefaultWorkingDirectory)

  - bash: |
      set -e
      set -x

      echo "SURGE_VERSION: $SURGE_VERSION"

      ls -alFh

      mkdir -p releases
      mv *.exe releases
      mv *.dmg releases
      mv *.deb releases
      mv *.tgz releases

      openssl dgst -sha256 releases/* > release_sha256.txt
      mv release_sha256.txt releases

      # perform GH release
      . $AGENT_TEMPDIRECTORY/surge-build-bot.sh
      export GHR=ghr_v0.12.0_linux_amd64
      curl -L https://github.com/tcnksm/ghr/releases/download/v0.12.0/$GHR.tar.gz --output ghr.tar.gz
      tar zxvf ghr.tar.gz

      echo "SURGE BRANCH is $SURGE_BRANCH"
      if [ "$SURGE_BRANCH" == "main" ]; then
        echo "Exporting to NIGHTLY"
        export SURGE_LOCAL_BRANCH="NIGHTLY"
        export PRE="-prerelease"
      else
        echo "Exporting to new version '$SURGE_VERSION'"
        export SURGE_LOCAL_BRANCH=$SURGE_VERSION
      fi
      $GHR/ghr $PRE -b "Release $SURGE_VERSION" -recreate $SURGE_LOCAL_BRANCH releases

      # Move the website generation here
      . $AGENT_TEMPDIRECTORY/checkout-website.sh

      pushd surge-synthesizer.github.io

      if [ "$SURGE_BRANCH" == "NIGHTLY" ]; then
        echo $(date "+%Y-%m-%d %H:%M:%S %Z") > _includes/latest_build_time
        echo https://github.com/surge-synthesizer/releases/releases/download/$SURGE_BRANCH/Surge-$SURGE_VERSION-Setup.dmg > _includes/latest_macos_url
        echo https://github.com/surge-synthesizer/releases/releases/download/$SURGE_BRANCH/Surge-$SURGE_VERSION-Setup.exe > _includes/latest_win_x64_url
        echo https://github.com/surge-synthesizer/releases/releases/download/$SURGE_BRANCH/Surge-$SURGE_VERSION-Setup-x86.exe > _includes/latest_win_x86_url
        echo https://github.com/surge-synthesizer/releases/releases/download/$SURGE_BRANCH/Surge-linux-x64-$SURGE_VERSION.deb > _includes/latest_linux_x64_url
        cp ../git_info/* _includes
      else
        echo $(date +%Y-%m-%d) > _includes/stable_build_time
        echo $SURGE_BRANCH > _includes/stable_build_version
        echo https://github.com/surge-synthesizer/releases/releases/download/$SURGE_BRANCH/Surge-$SURGE_VERSION-Setup.dmg > _includes/stable_macos_url
        echo https://github.com/surge-synthesizer/releases/releases/download/$SURGE_BRANCH/Surge-$SURGE_VERSION-Setup.exe > _includes/stable_win_x64_url
        echo https://github.com/surge-synthesizer/releases/releases/download/$SURGE_BRANCH/Surge-$SURGE_VERSION-Setup-x86.exe > _includes/stable_win_x86_url
        echo https://github.com/surge-synthesizer/releases/releases/download/$SURGE_BRANCH/Surge-linux-x64-$SURGE_VERSION.deb > _includes/stable_linux_x64_url
      fi

      git add _includes
      git commit -m "Update releases for $SURGE_VERSION"
      git push
      popd

      # . $AGENT_TEMPDIRECTORY/update-website.sh $SURGE_LOCAL_BRANCH $SURGE_VERSION

      # Finally tell discord
      curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"A New Nightly is Up at https://surge-synthesizer.github.io/nightly - ${SURGE_VERSION}. Enjoy.\"}" `cat $AGENT_TEMPDIRECTORY/discord-nightly.webhook`
    displayName: Perform Release
